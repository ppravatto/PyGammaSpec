from __future__ import annotations

import os
import numpy as np

from typing import List, Tuple

class GammaSpectrum:

    def __init__(self) -> None:
        self.__computed: bool = False
        self.__time: float = None
        self.__channels: List[float] = []
        self.__histogram: List[float] = []
    
    def __setup_operation(self, other: GammaSpectrum) -> GammaSpectrum:
        """
        Validate and setup a binary operation between spectrum objects. The function
        checks if the channel labels are compatible within the limit imposed by the shortest
        spectrum. If compatible the function returns a partially initialized GammaSpectrum object

        Raises
        ------
        RuntimeError
            Exception raised if the two spectra are not compatible
        
        Returns
        -------
        GammaSpectrum
            The partially initialized object containing the list of channels. The acquisition time has been set to 1s
            and the computed flag has been set to True.
        """

        limit = min(len(self.__channels), len(other.__channels))
        if not np.allclose(self.__channels[0:limit], other.__channels[0:limit], rtol=1e-5):
            raise RuntimeError("Cannot perform operation on two spectra characterized by different channels labels")
        
        obj = GammaSpectrum()
        obj.__computed = True
        obj.__time = 1
        obj.__channels = self.__channels[0:limit]
        return obj

    def __add__(self, other: GammaSpectrum) -> GammaSpectrum:
        obj = self.__setup_operation(other)
        obj.__histogram = [x + y for x, y in zip(self.scaled_histogram, other.scaled_histogram)]
        return obj
    
    def __sub__(self, other: GammaSpectrum) -> GammaSpectrum:
        obj = self.__setup_operation(other)
        obj.__histogram = [x - y for x, y in zip(self.scaled_histogram, other.scaled_histogram)]
        return obj
    
    @classmethod
    def from_PRA_histogram(self, path: str, acqisition_time: float) -> GammaSpectrum:
        """
        Construct a GammaSpectrum object from a PRA histogram file and the total acquisition time.
        The function is based around the `load_PRA_histogram` function.

        Returns
        -------
        GammaSpectrum
            A fully initialized GammaSpectrum object containing the measured data.
        """
        obj = GammaSpectrum()
        obj.load_PRA_histogram(path, acqisition_time)
        return obj
    
    def load_PRA_histogram(self, path: str, acqisition_time: float) -> None:
        """
        Load the gamma spectrum from a `.txt` histogram file generated by PRA.

        Arguments
        ---------
        path: str
            The path to the histogram file generated by PRA
        acquisition_time: float
            The acquisition time in seconds (positive integer or float)
        
        Raises
        ------
        ValueError
            Exception raised if the arguments given are deemed invalid
        """

        if not os.path.isfile(path):
            raise ValueError(f"The path '{path}' does not point to a valid file")
        
        if acqisition_time <= 0:
            raise ValueError(f"The acquisition time must be a positive integer or float")
        
        self.__time = acqisition_time
        self.__histogram = []
        
        with open(path, 'r') as file:
            
            _ = file.readline()

            for line in file:
                sline = line.split()
                self.__channels.append(float(sline[0]))
                self.__histogram.append(float(sline[1]))

    @property
    def is_computed(self) -> bool:
        """
        Indicates whether the spectrum is computed or not. If True the acquisition time
        is set to 1s.
        
        Returns
        -------
        bool
            True if the spectrum has been obtained from an operation, else False
        """
        return self.__computed

    @property
    def acquisition_time(self) -> float:
        """
        The total acquisition time used in the measurement. If the object is derived from a
        binary operation between different spectra objects, the acquisition time will be set
        to 1 second.

        Returns
        -------
        float
            The acquisition time in seconds.
        """
        return self.__time

    @property
    def nchannels(self) -> int:
        """
        The total number of channels in the uncutted spectrum.

        Returns
        -------
        int
            The total number of channels in the spectrum.
        """
        return len(self.__histogram)
    
    @property
    def counts(self) -> int:
        """
        The total number of counts mesured during the acquisition time.

        Returns
        -------
        int
            The total number of measured pulses.
        """
        return int(sum(self.__histogram))
    
    @property
    def countrate(self) -> float:
        """
        The average counting rate computed as the total number of counts
        divided by the acquisition time in seconds.

        Returns
        -------
        float
            The conting rate as counts per second.
        """
        return self.counts/self.__time
    
    @property
    def scaled_histogram(self) -> List[float]:
        """
        The gamma pulse height histogram in which the number of pulse per channel
        has been scaled by the  total acquisition time.

        Returns
        -------
        List[float]
            The list containing the count rate associated with each channel.
        """
        return [y/self.__time for y in self.__histogram]
    
    @property
    def spectrum(self) -> Tuple[List[float], List[float]]:
        """
        Return the list of channels togeter with the scaled histogram.

        Returns
        -------
        List[float]
            The list of channel labels.
        List[float]
            The list of countrate values associated to each channel.
        """
        return self.__channels, self.scaled_histogram