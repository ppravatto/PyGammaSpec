from __future__ import annotations

import os
import numpy as np

from typing import List, Tuple, Optional

class GammaSpectrum:

    def __init__(self) -> None:
        self.__acquisition_time: Optional[float] = None
        self.__channels: List[float] = []
        self.__counts: List[float] = []
    
    def __setup_operation(self, other: GammaSpectrum) -> GammaSpectrum:
        """
        Validate and setup a binary operation between spectrum objects. The function
        checks if the channel labels are compatible within the limit imposed by the shortest
        spectrum. If compatible the function returns a partially initialized GammaSpectrum object.

        Raises
        ------
        RuntimeError
            Exception raised if the two spectra are not compatible.
        
        Returns
        -------
        GammaSpectrum
            The partially initialized object containing the list of channels. The acquisition time is set to None.
        """

        limit = min(len(self.__channels), len(other.__channels))
        if not np.allclose(self.__channels[0:limit], other.__channels[0:limit], rtol=1e-5):
            raise RuntimeError("Cannot perform operation on two spectra characterized by different channels labels")
        
        obj = GammaSpectrum()
        obj.__channels = self.__channels[0:limit]
        return obj
    
    def __add__(self, other: GammaSpectrum) -> GammaSpectrum:
        obj = self.__setup_operation(other)
        obj.__counts = [x + y for x, y in zip(self.__counts, other.__counts)]
        return obj
    
    def __sub__(self, other: GammaSpectrum) -> GammaSpectrum:
        obj = self.__setup_operation(other)
        obj.__counts = [x - y for x, y in zip(self.__counts, other.__counts)]
        return obj
    
    @classmethod
    def from_PRA_histogram(self, path: str, acqisition_time: float) -> GammaSpectrum:
        """
        Construct a GammaSpectrum object from a PRA histogram file and the total acquisition time.

        Arguments
        ---------
        path: str
            The path to the histogram file generated by PRA.
        acquisition_time: float
            The acquisition time in seconds (positive integer or float).
        
        Raises
        ------
        ValueError
            Exception raised if the arguments given are deemed invalid.

        Returns
        -------
        GammaSpectrum
            A fully initialized GammaSpectrum object containing the measured data.
        """

        if not os.path.isfile(path):
            raise ValueError(f"The path '{path}' does not point to a valid file")
        
        if acqisition_time <= 0:
            raise ValueError(f"The acquisition time must be a positive integer or float")

        obj = GammaSpectrum()
        obj.__acquisition_time = acqisition_time
        obj.__counts = []
        
        with open(path, 'r') as file:
            
            _ = file.readline()

            for line in file:
                sline = line.split()
                obj.__channels.append(float(sline[0]))
                obj.__counts.append(float(sline[1])/acqisition_time)
        
        return obj

    @property
    def acquisition_time(self) -> Optional[float]:
        """
        The total acquisition time used in the measurement. If the object is derived from a
        binary operation between different spectra objects, the acquisition time will be set
        to None.

        Returns
        -------
        Optional[float]
            The acquisition time in seconds. If `None` the spectrum has been obtained form
            operations between spectra.
        """
        return self.__acquisition_time
    
    @property
    def channels(self) -> List[float]:
        """
        The list of acquisition channels.

        Returns
        -------
        List[float]
            The list of channels.
        """
        return self.__channels
    
    @property
    def counts(self) -> List[float]:
        """
        The activity in counts per second for each channel.

        Returns
        -------
        List[float]
            The conting rate for each channel.
        """
        return self.__counts
    
    @property
    def activity(self) -> float:
        """
        The total activity of the sample, as pulse per second, recorded over all channels.

        Returns
        -------
        float
            The total activity of the sample, as pulse per second, recorded over all channels.
        """
        return sum(self.__counts)
    

    @property
    def spectrum(self) -> Tuple[List[float], List[float]]:
        """
        Return the list of channels togeter with the corresponding activity list.

        Returns
        -------
        List[float]
            The list of channel labels.
        List[float]
            The list of countrate values associated to each channel.
        """
        return self.channels, self.counts

    def average_smoothing(self, width: int) -> GammaSpectrum:
        """
        Applies an average smoothing filter to the gamma spectrum.

        Argument
        --------
        width: int
            The excursion of the averaging windows (the total number of points is `2*width + 1`)

        Returns
        -------
        GammaSpectrum
            The smoothed gamma spectrum.
        """
        if width<=0:
            raise ValueError("The average window width must be a positive integer")
        
        obj = GammaSpectrum()
        obj.__acquisition_time = None 

        obj.__channels = self.__channels[width:-width]

        current = 0
        for i in range(len(obj.__channels)):
            
            if i==0:
                current = sum([x for x in self.__counts[0:2*width+1]])
            else:
                current += self.__counts[2*width+i] - self.__counts[i-1]
            
            obj.__counts.append(current/(2*width+1))

        #obj.__channels, obj.__histogram = [], []
        # for i, channel in enumerate(self.__channels[width:-width]):
        #     avg = self.scaled_histogram[i+width]
        #     for j in range(width):
        #         avg += self.scaled_histogram[i+width+j+1] + self.scaled_histogram[i+width-j-1]
        #     obj.__channels.append(channel)
        #     obj.__histogram.append(avg/(2.*width+1))
        
        return obj